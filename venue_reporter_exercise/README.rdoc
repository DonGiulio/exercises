= Exercise

Write a Ruby class which generates reporting data in a given date range.

The date range is passed in as maybe String format or maybe a Date object.

Here's the data model:

We have the concept of venues (restaurants and bars), tabs (like a "bill" or "check"), and users who open and belong to tabs.

* Multiple users can be on the same tab, and a user can be on multiple tabs.
* The many-to-many relationship between users and tabs is UserTab
* A tab belongs to a venue
* A user can make one or more payments on a tab
* A payment has a success status (boolean)

The reporting data to generate is a list of venues, the number of transactions at that venue, and the value of the transactions in the given date range.

Each row should be VenueRow class with the 3 methods name, transactions and value (for venue name, number of transactions and Â£ value).

Assume you're using ActiveRecord in Rails. State any other assumptions or comments to (briefly) explain design decisions.

Here's the existing model classes:

    class Venue < ActiveRecord::Base
      has_many :tabs
    end
    
    class Tab < ActiveRecord::Base
      belongs_to :venue
      has_many :user_tabs
    end
    
    class UserTab < ActiveRecord::Base
      belongs_to :tab
      belongs_to :user
      has_many :payments
    end
    
    class User < ActiveRecord::Base
      has_many :user_tabs
      has_many :tabs, through: :user_tabs
    end
    
    class Payment < ActiveRecord::Base
      belongs_to :user_tab
    end

The reporting class should have a public method results which returns an ordered array of VenueRows, with highest value first.

== Brief explanation
The test is implemented in a Rails 4 project, because of the requirement of using the +ActiveRecord+, Rails 4 wouldn't be strictly required, and I could have included +ActiveRecord+ in a standalone project, though this approach was just simpler and faster. 

The class +VenueReport+ can be seen in +app/reports/venue_report.rb+, which contains also the declaration of +VenueRow+. The initialiser takes care of getting and converting the date ranges for the report, and loading into the report the payments to be reported.

The heart of the exercise is in the +generate+ method, which loops through all the payments found, and populates a hash of +Venue+s calculating the report values. 

The hash is finally converted to an Array of +VenueRow+ as requested and sorted as appropriate.

In +spec/features/venue_repor_spec.rb+ there's the rspec code testing the functionalities of the class. All the test data for running the rspec suite is generated by the Factory Girl factories in the +spec/factories+ directory. 

The exercise was written strictly using a TDD methodology resulting in a 100% code coverage, 

== Instructions to run the tests

Steps to get the solution up and running:

1. unzip the file and cd to the newly created directory
2. run the 'bundle install --binstubs' command to install rspec and its executable bin
3. to run the tests run the command: 
    bin/rspec
4. expected output: 

     % rspec
     .........

     Finished in 5.99 seconds (files took 1.86 seconds to load)
     9 examples, 0 failures



